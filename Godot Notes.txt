			Naming Conventions:
Type          | Convention   | Example
--------------|--------------|----------------------
File names    | snake_case   | yaml_parser.gd
Class names   | PascalCase   | class_name YAMLParser
Node names    | PascalCase   | Camera3D, Player
Functions     | snake_case   | func load_level():
Variables     | snake_case   | var particle_effect
Signals       | snake_case   | signal door_opened
Constants     | CONSTANT_CASE| const MAX_SPEED = 200
Enum names    | PascalCase   | enum Element
Enum members  | CONSTANT_CASE| {EARTH, WATER, AIR, FIRE}
_______________________________________________________________
Player Detection:

Area2D Method (Good for static objects):
	
func _on_area_2d_body_entered(body: CharacterBody2D) -> void:
	if body.name == "Player":
		is_touching_player = true

func _on_area_2d_body_exited(body: CharacterBody2D) -> void:
	if body.name == "Player":
		is_touching_player = false

Vector Method (for more complex interactions):
	
(Global)
extends Node2D

# Store the player path
@onready var player = $"/root/Game/Player"

# provides the vector between any node and the player
func get_vector_to_player(self_node: Node2D) -> Vector2:
	if player:
		return player.global_position - self_node.global_position
	else:
		print(self, "get_vector_to_player()", "Player Path Has Changed")
		return Vector2.ZERO

(Node)
func _process():
	var distance_to_player := Global.get_distance_to_player(self)
	if distance_to_player <= 10:
		is_touching_player = true
	else:
		is_touching_player = false
_______________________________________________________________
