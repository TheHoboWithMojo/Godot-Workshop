extends Node

# ----- Node References -----
@onready var file_syncer = $"/root/Game/FileSyncer"

# ----- Signals -----
signal sheet_completed(sheet_name: String)

# ----- Variables -----
var current_sync = null
var spreadsheet_name = ""

# ----- Configuration Data -----
var spreadsheet_configs = {
	"items": {
		"id": "1gLbKH8qPuMIA-s8Hr9qaiteuf-wpcvgvN3pkfZ--5nQ",
		"csv_path": "res://data/items.csv",
		"key_byte_pair_path": "res://data/item_key_byte_pairs.json"
	},
	"quests": {
		"id": "1n3to2dllKgTFvkpmE4Zw98Y_5wce10mDet8FhWPGWZc",
		"csv_path": "res://data/quests.csv",
		"key_byte_pair_path": "res://data/quests_key_byte_pairs.json"
	}
}

# ----- Sheet Syncing Functions -----
func sync_all_sheets():
	print("Starting sync of all sheets...")
	for sheet_name in Data.spreadsheet_configs.keys():
		print("Processing sheet: ", sheet_name)
		await sync_sheet(sheet_name)
		await sheet_completed
	print("All sheets processed!")

func sync_sheet(sheet_name: String):
	if Data.spreadsheet_configs.has(sheet_name):
		current_sync = sheet_name
		var metadata_url = "https://docs.google.com/spreadsheets/d/%s/edit" % Data.spreadsheet_configs[sheet_name].id
		await _make_initial_request(metadata_url, true)

func _make_initial_request(url: String, is_metadata: bool = false) -> void:
	file_syncer.cancel_request()
	
	file_syncer.use_threads = true
	file_syncer.accept_gzip = true
	file_syncer.max_redirects = 0
	
	var headers = [
		"User-Agent: Mozilla/5.0",
		"Accept: text/csv,application/json",
		"Accept-Encoding: gzip, deflate",
		"Connection: keep-alive"
	]
	
	file_syncer.set_meta("is_metadata", is_metadata)
	var error = file_syncer.request(url, headers)
	if error == OK:
		await file_syncer.request_completed

# ----- Data Processing Functions -----
func _load_first_column(csv_path):
	var key_byte_pair = []
	var file = FileAccess.open(csv_path, FileAccess.READ)
	var byte_pos = 0
	
	while !file.eof_reached():
		byte_pos = file.get_position()
		var line = file.get_csv_line()
		if line.size() > 0:
			key_byte_pair.append([line[0], byte_pos])
	
	key_byte_pair.pop_front() # Remove the first term (it's a title)
	file.close()
	return key_byte_pair

func save_to_json(parent_file_path: String, key_byte_pair_path: String):
	var file_array = _load_first_column(parent_file_path)
	var json_string = JSON.stringify(file_array)
	var file = FileAccess.open(key_byte_pair_path, FileAccess.WRITE)
	file.store_string(json_string)
	file.close()
	print("Key-byte pairs saved to: %s" % key_byte_pair_path)

func get_byte_from_key(key: String, key_byte_pair_path: String) -> int:
	var file = FileAccess.open(key_byte_pair_path, FileAccess.READ)
	var key_byte_pairs = JSON.parse_string(file.get_as_text())
	file.close()
	
	var left = 0
	var right = key_byte_pairs.size() - 1
	
	while left <= right:
		var mid = (left + right) / 2
		var key_name = key_byte_pairs[mid][0]
		
		if key_name == key:
			return key_byte_pairs[mid][1]
		elif key_name < key:
			left = mid + 1
		else:
			right = mid - 1
	
	print("Error: Binary Search ", key, " not found in ", key_byte_pair_path)
	return -1

func print_quest_info(key: String) -> void:
	var csv_path = spreadsheet_configs["quests"]["csv_path"]
	var key_byte_pair_path = spreadsheet_configs["quests"]["key_byte_pair_path"]
	
	var byte_position = get_byte_from_key(key, key_byte_pair_path)
	
	if byte_position != -1:
		var file = FileAccess.open(csv_path, FileAccess.READ)
		file.seek(byte_position)
		var row = file.get_csv_line()
		print("Info for Quest '%s': %s" % [key, row])
		file.close()

func print_item_info(key: String) -> void:
	var csv_path = spreadsheet_configs["items"]["csv_path"]
	var key_byte_pair_path = spreadsheet_configs["items"]["key_byte_pair_path"]
	
	var byte_position = get_byte_from_key(key, key_byte_pair_path)
	
	if byte_position != -1:
		var file = FileAccess.open(csv_path, FileAccess.READ)
		file.seek(byte_position)
		var row = file.get_csv_line()
		print("Info for Item '%s': %s" % [key, row])
		file.close()

func _ready():
	#print_quest_info("Kill Bill")
	#print_item_info("Melon")
	#print_translation("res://data/items.Type.translation")
	pass
